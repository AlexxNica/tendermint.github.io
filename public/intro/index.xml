<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intros on Tendermint</title>
    <link>http://tendermint.com/intro/</link>
    <description>Recent content in Intros on Tendermint</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://tendermint.com/intro/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/getting-started/deploy-testnet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/getting-started/deploy-testnet/</guid>
      <description>

&lt;h2 id=&#34;tendermint-core&#34;&gt;Tendermint Core&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve seen how TMSP works, and even played with a few applications using the &lt;code&gt;tmsp-cli&lt;/code&gt; tool,
let&amp;rsquo;s run an actual Tendermint node.&lt;/p&gt;

&lt;p&gt;When running a live application, a Tendermint node takes the place of the &lt;code&gt;tmsp-cli&lt;/code&gt; tool by sending TMSP requests
to the application: many &lt;code&gt;append_tx&lt;/code&gt; msgs to run transactions followed by a &lt;code&gt;commit&lt;/code&gt; to get the application Merkle root hash, and so on.&lt;/p&gt;

&lt;p&gt;First, we need to initialize a genesis file and a validator key in &lt;code&gt;~/.tendermint&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the directory by setting the &lt;code&gt;$TMROOT&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;Now,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tendermint will try to connect to a tmsp appliction by default on &lt;code&gt;127.0.0.1:46658&lt;/code&gt;,
but you probably don&amp;rsquo;t have one running yet.&lt;/p&gt;

&lt;p&gt;So in another window, lets start the &lt;code&gt;dummy&lt;/code&gt; app,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a few seconds you should see blocks start streaming in!&lt;/p&gt;

&lt;p&gt;Now you can send transactions through the Tendermint RPC server with curl requests, or from your browser:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/broadcast_tx?tx=\&amp;quot;abcd\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For handling responses, we recommend you &lt;a href=&#34;http://jmhodges.github.io/jsonpp/&#34;&gt;install the &lt;code&gt;jsonpp&lt;/code&gt; tool&lt;/a&gt; to pretty print the JSON&lt;/p&gt;

&lt;p&gt;We can see the chain&amp;rsquo;s status at the &lt;code&gt;/status&lt;/code&gt; end-point:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/status |  jsonpp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the &lt;code&gt;latest_app_hash&lt;/code&gt; in particular:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl http://localhost:46657/status |  jsonpp | grep app_hash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;visit &lt;a href=&#34;http://localhost:46657&#34;&gt;http://localhost:46657&lt;/a&gt; in your browser to see the other endpoints.&lt;/p&gt;

&lt;h2 id=&#34;deploy-a-tendermint-testnet&#34;&gt;Deploy a Tendermint Testnet&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve run a single Tendermint node with one validator and a couple applications,
let&amp;rsquo;s deploy a testnet to run our application with four validators.&lt;/p&gt;

&lt;p&gt;For this part of the tutorial, we assume you have an account at digital ocean and are willing to
pay to start some new droplets to run your nodes. You can of course stop and destroy them at any time.&lt;/p&gt;

&lt;p&gt;First, install &lt;a href=&#34;https://docs.docker.com/machine/install-machine/&#34;&gt;&lt;code&gt;docker-machine&lt;/code&gt;&lt;/a&gt; and get a DigitalOcean account and access token.&lt;/p&gt;

&lt;p&gt;Then, install &lt;code&gt;mintnet&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/tendermint/mintnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To provision machines on DigitalOcean:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet create -- --driver=digitalocean --digitalocean-image=docker --digitalocean-access-token=YOUR_ACCCESS_TOKEN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can leave out the &lt;code&gt;--digitalocean-access-token&lt;/code&gt; flag if you set your &lt;code&gt;DIGITALOCEAN_ACCESS_TOKEN&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;By default this creates 4 new machines.  Check the help messages for more info, e.g. &lt;code&gt;mintnet create --help&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, create the testnet configuration folders.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet init chain mytest_dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This creates directories in &lt;code&gt;mytest&lt;/code&gt; for the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls mytest_dir/
  chain_config.json # list of validator pubkeys and ip:ports
  app   # Common configuration directory for your blockchain applicaiton
  core  # Common configuration directory for Tendermint core
  data  # Common configuration directory for the Merkleyes key-value store
  mach1 # Configuration directory for the Tendermint core daemon on machine 1
  mach2 # Configuration directory for the Tendermint core daemon on machine 2
  mach3 # Configuration directory for the Tendermint core daemon on machine 3
  mach4 # Configuration directory for the Tendermint core daemon on machine 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can change the files in the app folder to change which TMSP application run on your testnet.
The default script app/init.sh gets run on each node to install the TMSP application straight from Github.
Edit core/init.sh to change the Tendermint version being run.&lt;/p&gt;

&lt;p&gt;Now start the testnet service.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet start mytest mytest_dir/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can stop and remove the application as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet stop mytest; mintnet rm mytest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to destroy your provisioned machines!&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mintnet destroy --machines=&amp;quot;mach1,mach2,mach3,mach4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note you can use the &lt;code&gt;--machines&lt;/code&gt; flag on any command to specify machines,
for instance &lt;code&gt;--machines mach[1-3],mach7&lt;/code&gt; will apply to mach1, mach2, mach3, and mach7.&lt;/p&gt;

&lt;p&gt;TODO: Document tutorial on docker-machine ssh mach1, docker ps, etc, or at least link to good Docker tutorials.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/getting-started/first-tmsp-app/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/getting-started/first-tmsp-app/</guid>
      <description>

&lt;h2 id=&#34;a-first-example&#34;&gt;A First Example&lt;/h2&gt;

&lt;p&gt;Make sure you &lt;a href=&#34;https://golang.org/doc/install&#34;&gt;have Go installed&lt;/a&gt; and &lt;a href=&#34;https://github.com/tendermint/tendermint/wiki/Setting-GOPATH&#34;&gt;put &lt;code&gt;$GOPATH/bin&lt;/code&gt; in your &lt;code&gt;$PATH&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, install the &lt;code&gt;tmsp-cli&lt;/code&gt; tool and example applications:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get -u github.com/tendermint/tmsp/cmd/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now run &lt;code&gt;tmsp-cli --help&lt;/code&gt; to see the list of commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COMMANDS:
   batch        Run a batch of TMSP commands against an application
   console      Start an interactive console for multiple commands
   echo         Have the application echo a message
   info         Get some info about the application
   set_option   Set an option on the application
   append_tx    Append a new tx to application
   check_tx     Validate a tx
   commit       Get application Merkle root hash
   help, h      Shows a list of commands or help for one command
   
GLOBAL OPTIONS:
   --address &amp;quot;tcp://127.0.0.1:46658&amp;quot;    address of application socket
   --help, -h                           show help
   --version, -v                        print the version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;tmsp-cli&lt;/code&gt; tool lets us send TMSP messages to our application, to help build and debug them.&lt;/p&gt;

&lt;p&gt;The most important messages are &lt;code&gt;append_tx&lt;/code&gt;, &lt;code&gt;check_tx&lt;/code&gt;, and &lt;code&gt;commit&lt;/code&gt;,
but there are others for convenience, configuration, and information purposes.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start a dummy application. The dummy just stores transactions in a merkle tree:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In another terminal, run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tmsp-cli echo hello
tmsp-cli info
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The application should echo &lt;code&gt;hello&lt;/code&gt; and give you some information about itself.&lt;/p&gt;

&lt;p&gt;A TMSP application must provide two things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a socket server&lt;/li&gt;
&lt;li&gt;a handler for TMSP messages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run the &lt;code&gt;tmsp-cli&lt;/code&gt; tool we open a new connection to the application&amp;rsquo;s socket server,
send the given TMSP message, and wait for a response.&lt;/p&gt;

&lt;p&gt;The server may be generic for a particular language, and we provide one for Go in &lt;code&gt;tmsp/server&lt;/code&gt;.
There is one for Python in &lt;code&gt;example/python/tmsp/server.py&lt;/code&gt;, and one for Node JS in &lt;code&gt;github.com/tendermint/js-tmsp&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The handler is specific to the application, and may be arbitrary,
so long as it is deterministic and conforms to the TMSP interface specification.&lt;/p&gt;

&lt;p&gt;So when we run &lt;code&gt;tmsp-cli info&lt;/code&gt;, we open a new connection to the TMSP server, which calls the &lt;code&gt;Info()&lt;/code&gt; method on the application, which tells us the number of transactions in our Merkle tree.&lt;/p&gt;

&lt;p&gt;Now, since every command opens a new connection, we provide the &lt;code&gt;tmsp-cli console&lt;/code&gt; and &lt;code&gt;tmsp-cli batch&lt;/code&gt; commands,
to allow multiple TMSP messages to be sent over a single connection.&lt;/p&gt;

&lt;p&gt;Running &lt;code&gt;tmsp-cli console&lt;/code&gt; should drop you in an interactive console for speaking TMSP messages to your application.&lt;/p&gt;

&lt;p&gt;Try running these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; echo hello
-&amp;gt; data: {hello}

&amp;gt; info 
-&amp;gt; data: {size:0}

&amp;gt; commit 

&amp;gt; append_tx abc
-&amp;gt; code: OK

&amp;gt; info 
-&amp;gt; data: {size:1}

&amp;gt; commit 
-&amp;gt; data: {750502FC7E84BBD788ED589624F06CFA871845D1}

&amp;gt; query abc
-&amp;gt; code: OK
-&amp;gt; data: {Index=0 value=abc exists=true}

&amp;gt; append_tx def=xyz
-&amp;gt; code: OK

&amp;gt; commit 
-&amp;gt; data: {76393B8A182E450286B0694C629ECB51B286EFD5}

&amp;gt; query def
-&amp;gt; code: OK
-&amp;gt; data: {Index=1 value=xyz exists=true}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that if we do &lt;code&gt;append_tx abc&lt;/code&gt; it will store &lt;code&gt;(abc, abc)&lt;/code&gt;,
but if we do &lt;code&gt;append_tx abc=efg&lt;/code&gt; it will store &lt;code&gt;(abc, efg)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Similarly, you could put the commands in a file and run &lt;code&gt;tmsp-cli --verbose batch &amp;lt; myfile&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;another-example&#34;&gt;Another Example&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve got the hang of it, let&amp;rsquo;s try another application, the &amp;ldquo;counter&amp;rdquo; app.&lt;/p&gt;

&lt;p&gt;The counter app doesn&amp;rsquo;t use a Merkle tree, it just counts how many times we&amp;rsquo;ve sent a transaction,
asked for a hash, or committed the state. The result of &lt;code&gt;commit&lt;/code&gt; is just the number of transactions sent.&lt;/p&gt;

&lt;p&gt;This application has two modes: &lt;code&gt;serial=off&lt;/code&gt; and &lt;code&gt;serial=on&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;serial=on&lt;/code&gt;, transactions must be a big-endian encoded incrementing integer, starting at 0.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;serial=off&lt;/code&gt;, there are no restrictions on transactions.&lt;/p&gt;

&lt;p&gt;We can toggle the value of &lt;code&gt;serial&lt;/code&gt; using the &lt;code&gt;set_option&lt;/code&gt; TMSP message.&lt;/p&gt;

&lt;p&gt;When &lt;code&gt;serial=on&lt;/code&gt;, some transactions are invalid.
In a live blockchain, transactions collect in memory before they are committed into blocks.
To avoid wasting resources on invalid transactions,
TMSP provides the &lt;code&gt;check_tx&lt;/code&gt; message,
which application developers can use to accept or reject messages,
before they are stored in memory or gossipped to other peers.&lt;/p&gt;

&lt;p&gt;In this instance of the counter app, &lt;code&gt;check_tx&lt;/code&gt; only allows transactions whose integer is greater than the last committed one.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s kill the console and the dummy application, and start the counter app:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;counter
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Again, the code is just&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;server.StartListener(&amp;quot;tcp://0.0.0.0:46658&amp;quot;, example.NewCounterApplication())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;where the CounterApplication is defined in &lt;code&gt;example/golang/counter.go&lt;/code&gt;, and implements the TMSP application interface.&lt;/p&gt;

&lt;p&gt;In another window, start the &lt;code&gt;tmsp-cli console&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set_option serial on
-&amp;gt; data: {serial=on}

&amp;gt; check_tx 0x00
-&amp;gt; code: OK

&amp;gt; check_tx 0xff
-&amp;gt; code: OK

&amp;gt; append_tx 0x00
-&amp;gt; code: OK

&amp;gt; check_tx 0x00
-&amp;gt; code: BadNonce
-&amp;gt; log: Invalid nonce. Expected &amp;gt;= 1, got 0

&amp;gt; append_tx 0x01
-&amp;gt; code: OK

&amp;gt; append_tx 0x04
-&amp;gt; code: BadNonce
-&amp;gt; log: Invalid nonce. Expected 2, got 4

&amp;gt; info 
-&amp;gt; data: {hashes:0, txs:2}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very simple application, but between &lt;code&gt;counter&lt;/code&gt; and &lt;code&gt;dummy&lt;/code&gt;, its easy to see how you can build out arbitrary application states on top of the TMSP.
In the near future, &lt;code&gt;erisdb&lt;/code&gt; of Eris Industries will also run atop TMSP, bringing with it Ethereum-like accounts, the Ethereum virtual-machine, Eris&amp;rsquo;s permissioning scheme, and native contracts extensions.&lt;/p&gt;

&lt;p&gt;But the ultimate flexibility comes from being able to write the application easily in any language.&lt;/p&gt;

&lt;p&gt;We have implemented the counter in a number of languages (see the example directory).&lt;/p&gt;

&lt;p&gt;To run the Node JS version, &lt;code&gt;cd&lt;/code&gt; to &lt;code&gt;example/js&lt;/code&gt; and run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node app.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(you&amp;rsquo;ll have to kill the other counter application process).
In another window, run the console and those previous TMSP commands.
You should get the same results as for the Go version.&lt;/p&gt;

&lt;p&gt;Want to write the counter app in your favorite language?! We&amp;rsquo;d be happy to accept the pull request!&lt;/p&gt;

&lt;h2 id=&#34;next-steps&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;In the next tutorial, we will show how to &lt;a href=&#34;http://tendermint.com/tutorials/launch-a-tmsp-testnet&#34;&gt;launch a TMSP testnet&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/getting-started/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/getting-started/home/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;install&#34;&gt;Install Tendermint&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;first-tmsp-app&#34;&gt;First TMSP App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;deploy-testnet&#34;&gt;Deploy a testnet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;next-steps&#34;&gt;Next Steps&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/getting-started/install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/getting-started/install/</guid>
      <description>

&lt;h1 id=&#34;install-go&#34;&gt;Install Go&lt;/h1&gt;

&lt;p&gt;Make sure you have installed Go and &lt;a href=&#34;https://github.com/tendermint/tendermint/wiki/Setting-GOPATH&#34;&gt;set the GOPATH&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;install-tendermint&#34;&gt;Install Tendermint&lt;/h1&gt;

&lt;p&gt;You should be able to install the latest with a simple &lt;code&gt;go get -u github.com/tendermint/tendermint/cmd/tendermint&lt;/code&gt;.
The &lt;code&gt;-u&lt;/code&gt; makes sure all dependencies are updated as well.&lt;/p&gt;

&lt;p&gt;See &lt;code&gt;tendermint version&lt;/code&gt; and &lt;code&gt;tendermint --help&lt;/code&gt; for more.&lt;/p&gt;

&lt;p&gt;If it does not work, see below.&lt;/p&gt;

&lt;p&gt;To start a one-node blockchain with a simple in-process application:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tendermint init
tendermint node --proxy_app=dummy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the &lt;a href=&#34;https://github.com/tendermint/tendermint/wiki/Application-Developers&#34;&gt;application developers guide&lt;/a&gt; for more details on building and running applications.&lt;/p&gt;

&lt;h2 id=&#34;reinstall&#34;&gt;Reinstall&lt;/h2&gt;

&lt;p&gt;If you already have Tendermint installed, then you can either set a new &lt;code&gt;$GOPATH&lt;/code&gt; and run the previous &lt;code&gt;go get&lt;/code&gt; command,
or else fetch and checkout the latest master branch in &lt;code&gt;$GOPATH/src/github.com/tendermint/tendermint&lt;/code&gt;,
and from that directory run&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go install ./cmd/tendermint
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;vendored-dependencies&#34;&gt;Vendored dependencies&lt;/h2&gt;

&lt;p&gt;If updated dependencies break builds, install the vendored commits using &lt;code&gt;glide&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fist, install &lt;code&gt;glide&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/Masterminds/glide
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, fetch the dependencies and install them with &lt;code&gt;glide&lt;/code&gt; and &lt;code&gt;go&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/tendermint/tendermint
glide install
go install ./cmd/tendermint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The latest Tendermint Core version is now installed. Check by running &lt;code&gt;tendermint version&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;troubleshooting&#34;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;If &lt;code&gt;go get&lt;/code&gt; failing bothers you, fetch the code using &lt;code&gt;git&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p $GOPATH/src/github.com/tendermint
git clone https://github.com/tendermint/tendermint $GOPATH/src/github.com/tendermint/tendermint
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/getting-started/next-steps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/getting-started/next-steps/</guid>
      <description>

&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;

&lt;p&gt;By now you&amp;rsquo;ve seen how to run a simple example TMSP application on a local Tendermint node
and on a remote Tendermint cluster.
To learn more about building TMSP applications and integrating with Tendermint, see the &lt;a href=&#34;docs/guides&#34;&gt;developer guides&lt;/a&gt;.
To learn more about Tendermint&amp;rsquo;s various pieces, checkout the &lt;a href=&#34;docs&#34;&gt;documentation&lt;/a&gt;.
For examples and inspiration, see the [list of TMSP applications]().&lt;/p&gt;

&lt;p&gt;Of course, there are &lt;a href=&#34;community&#34;&gt;lots of ways to get in touch&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/home/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;what-is-tendermint&#34;&gt;What is Tendermint?&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;tendermint-vs&#34;&gt;Tendermint vs. other software&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;what-is-tmsp&#34;&gt;Overview of TMSP&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/tendermint-vs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/tendermint-vs/</guid>
      <description>

&lt;h1 id=&#34;tendermint-vs-other-software&#34;&gt;Tendermint vs. Other Software&lt;/h1&gt;

&lt;p&gt;Here is how Tendermint compares to other softwre.&lt;/p&gt;

&lt;h2 id=&#34;zookeeper-etcd-consul&#34;&gt;Zookeeper, etcd, consul&lt;/h2&gt;

&lt;p&gt;Zookeeper, etcd, and consul are all implementations of a key-value store atop a classical,
non-BFT consensus algorithm. Zookeeper uses a version of Paxos called Zookeeper Atomic Broadcast,
while etcd and consul use the Raft consensus algorithm, which is much younger and simpler.
A typical cluster contains 3-5 machines, and can tolerate crash failures in up to &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; of the machines,
but even a single Byzantine fault can destroy the system.&lt;/p&gt;

&lt;p&gt;Each offering provides a slightly different implementation of a featureful key-value store,
but all are generally focused around providing basic services to distributed systems,
such as dynamic configuration, service discovery, locking, leader-election, and so on.&lt;/p&gt;

&lt;p&gt;Tendermint is in essence similar software, but with two key differences:
- It is Byzantine Fault Tolerant, meaning it can only tolerate up to a &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; of failures,
but those failures can include arbitrary behvaiour - including hacking and malicious attacks.
- It does not specify a particular application, like a fancy key-value store. Instead,
it focuses on arbitrary state machine replication, so developers can build the application logic
that&amp;rsquo;s right for them, from key-value store to cryptocurrency to e-voting platform and beyond.&lt;/p&gt;

&lt;p&gt;The layout of this Tendermint website content is also ripped directly and without shame from
&lt;a href=&#34;https://www.consul.io/&#34;&gt;consul.io&lt;/a&gt; and the other &lt;a href=&#34;https://www.hashicorp.com/#tools&#34;&gt;Hashicorp sites&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bitcoin-ethereum-etc&#34;&gt;Bitcoin, Ethereum, etc.&lt;/h2&gt;

&lt;p&gt;Tendermint emerged in the tradition of blockchains like Bitcoin, Ethereum, etc.
with the desire to have a more efficient and secure consensus algorithm than Bitcoin&amp;rsquo;s Proof of Work.
In the early days, Tendermint had a simple currency built in, and to become a validator in the system
user&amp;rsquo;s had to &amp;ldquo;bond&amp;rdquo; units of the currency into a security deposit which could be revoked if they misbehaved -
this is what made Tendermint a Proof-of-Stake algorithm.&lt;/p&gt;

&lt;p&gt;Since then, Tendermint has evolved to be a general purpose blockchain consensus engine that can host arbitrary application states.
So one can take the current Ethereum code base, whether in Rust, or Go, or Haskell, and run it as a TMSP application
using Tendermint consensus. Indeed, &lt;a href=&#34;github.com/tendermint/geth-tmsp&#34;&gt;we did that&lt;/a&gt;.
Essentially, TMSP enables smart contracts in any programming language.&lt;/p&gt;

&lt;p&gt;Another example of a cryptocurrency application built on Tendermint is &lt;a href=&#34;http://comsos.network&#34;&gt;Cosmos&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;hyperledger-erisdb&#34;&gt;Hyperledger, ErisDB&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hyperledger/fabric&#34;&gt;Hyperledger&lt;/a&gt;, takes a similar approach to Tendermint, but is more opinionated about how the state is managed,
and requires that all application behaviour runs in potentially many docker containers, modules it calls &amp;ldquo;chaincode&amp;rdquo;.
It uses an implementation of PBFT from a team at IBM that is &lt;a href=&#34;https://www.zurich.ibm.com/~cca/papers/sieve.pdf&#34;&gt;augmented to handle potentially non-deterministic chaincode&lt;/a&gt;
It is possible to implement this docker-based behaviour as a TMSP app in Tendermint,
though extending Tendermint to handle non-determinism remains for future work.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/eris-ltd/eris-db&#34;&gt;ErisDB&lt;/a&gt; is an implementation of the Ethereum Virtual Machine and Ethereum transaction mechanics,
with additional features for a name-registry, permissions, and native contracts, and an alternative blockchain API.
It uses Tendermint as its consensus engine, and provides a particular application state.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/what-is-tendermint/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/what-is-tendermint/</guid>
      <description>

&lt;h1 id=&#34;introduction-to-tendermint&#34;&gt;Introduction to Tendermint&lt;/h1&gt;

&lt;p&gt;Welcome to the Tendermint guide!  This is the best place to start if you&amp;rsquo;re new
to Tendermint.  If you&amp;rsquo;re already familiar with the basics of Tendermint and
TMSP, find more details in the &lt;a href=&#34;documentation&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-is-tendermint&#34;&gt;What is Tendermint?&lt;/h1&gt;

&lt;p&gt;Tendermint is a high-performance blockchain consensus engine that enables you to
run Byzantine fault tolerant applications, written in any programming language,
on many machines spread across the globe.
Unlike most blockchains or consensus solutions, which utilize opinionated
key-value stores, scripting languages, or development environments, Tendermint makes no assumptions about the
application state, giving developers the utmost freedom to express their business
logic using the tools right for them. This makes it possible to use any
programming language, and even to integrate with existing codebases like
Bitcoind, go-ethereum, consul, etcd, or otherwise.&lt;/p&gt;

&lt;p&gt;To achieve this flexibility, Tendermint and the application it powers run in
separate UNIX processes, and speak to each other via a simple messaging protocol
called the Tendermint Socket Protocol, or TMSP. Tendermint takes an application
conforming to the TMSP interface and replicates it on many machines,
ensuring that transactions are run in the same order on each machine.&lt;/p&gt;

&lt;p&gt;In addition to flexibility for application developers, the main benefits of
using Tendermint (as opposed to using Proof-of-Work systems or other BFT
consensus engines), are those derrived from the &lt;a href=&#34;Byzantine-Consensus-Algorithm&#34;&gt;Tendermint consensus
algorithm&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;simplicity&lt;/strong&gt;: Tendermint consensus commits blocks continuously commits
blocks and uses the same mechanism to commit blocks as it does to handle failure,
making it easy to understand and reason about.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;speed&lt;/strong&gt;: Tendermint blocks can commit to finality in the order of 1 second.
Tendermint can handle transaction volume at rates of up to 10,000
transactions per second for 250byte transactions.  The bottleneck is in the
application.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;security&lt;/strong&gt;: Tendermint consensus is not just fault tolerant,
it&amp;rsquo;s optimally Byzantine fault-tolerant, with accountability.  When the
blockchain forks, there is a way to determine liability and punish those who
misbehaved.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;scalability&lt;/strong&gt;: Unlike PoW, running parallel blockchains does not diminish the speed or
security of each chain, so it is possible to shard the application state and
achieve greater horizontal scalability.
The algorithm can also scale to hundreds or thousands of validators (depending on desired block times), and
will only get better over time with advances in bandwidth and cpu capacity.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;See how &lt;a href=&#34;tendermint-vs&#34;&gt;tendermint compares to other software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Continue with the &lt;a href=&#34;getting-started&#34;&gt;getting started guide&lt;/a&gt; to install and run example tendermint applications&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title></title>
      <link>http://tendermint.com/intro/what-is-tmsp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tendermint.com/intro/what-is-tmsp/</guid>
      <description>

&lt;h1 id=&#34;the-tendermint-socket-protocol&#34;&gt;The Tendermint Socket Protocol&lt;/h1&gt;

&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;

&lt;p&gt;Thus far, all blockchains &amp;ldquo;stacks&amp;rdquo; (such as &lt;a href=&#34;https://github.com/bitcoin/bitcoin&#34;&gt;Bitcoin&lt;/a&gt;) have had a monolithic design.  That is, each blockchain stack is a single program that handles all the concerns of a decentralized ledger; this includes P2P connectivity, the &amp;ldquo;mempool&amp;rdquo; broadcasting of transactions, consensus on the most recent block, account balances, Turing-complete contracts, user-level permissions, etc.&lt;/p&gt;

&lt;p&gt;This approach to blockchain development has several problems.  First, creating a new blockchain requires forking an existing blockchain stack, and this comes with the cost of complexity.  First you need to understand all the components of a blockchain stack, even those that aren&amp;rsquo;t directly relevant to the logic of your application.  This is especially true when the codebase is not modular in design and suffers from &amp;ldquo;spaghetti code&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Another problem with this approach is that it limits you to the language of the blockchain stack (or vice versa).  In the case of Ethereum which supports a Turing-complete bytecode virtual-machine, it limits you to languages that compile down to that bytecode; today, those are Serpent and Solidity.&lt;/p&gt;

&lt;p&gt;In contrast, our approach is to decouple the consensus engine and P2P layers from the details of the application state of the particular blockchain application.&lt;/p&gt;

&lt;h2 id=&#34;intro-to-tmsp&#34;&gt;Intro to TMSP&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tendermint/tendermint&#34;&gt;Tendermint Core&lt;/a&gt; (the &amp;ldquo;consensus engine&amp;rdquo;) speaks to the application via a socket protocol called &lt;a href=&#34;https://github.com/tendermint/tmsp&#34;&gt;TMSP&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To draw an analogy, lets talk about a well-known cryptocurrency, Bitcoin.  Bitcoin is a cryptocurrency blockchain where each node maintains a fully audited Unspent Transaction Output (UTXO) database. If one wanted to create a Bitcoin-like system on top of TMSP, Tendermint Core would be responsible for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sharing blocks and transactions between nodes&lt;/li&gt;
&lt;li&gt;Establishing a canonical/immutable order of transactions (the blockchain)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The application will be responsible for&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Maintaining the UTXO database&lt;/li&gt;
&lt;li&gt;Validating cryptographic signatures of transactions&lt;/li&gt;
&lt;li&gt;Preventing transactions from spending non-existent transactions&lt;/li&gt;
&lt;li&gt;Allowing clients to query the UTXO database.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tendermint is able to decompose the blockchain design by offering a very simple API between the application process and consensus process.&lt;/p&gt;

&lt;p&gt;The API consists of 3 primary message types that get delivered from the core to the application.  The application replies with corresponding response messages.&lt;/p&gt;

&lt;p&gt;The messages are specified here: &lt;a href=&#34;https://github.com/tendermint/tmsp#message-types&#34;&gt;https://github.com/tendermint/tmsp#message-types&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;AppendTx&lt;/code&gt; message is the work horse of the application.  Each transaction in the blockchain is delivered with this message. The application needs to validate each transactions received with the &lt;code&gt;AppendTx&lt;/code&gt; message against the current state, application protocol, and the cryptographic credentials of the transaction. A validated transaction then needs to update the application state — by binding a value into a key values store, or by updating the UTXO database.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;CheckTx&lt;/code&gt; message is similar to &lt;code&gt;AppendTx&lt;/code&gt;, but it&amp;rsquo;s only for validating transactions.  Tendermint Core&amp;rsquo;s mempool first checks the validity of a transaction with &lt;code&gt;CheckTx&lt;/code&gt;, and only relays valid transactions to its peers.  Applications may check an incrementing nonce in the transaction and return an error upon &lt;code&gt;CheckTx&lt;/code&gt; if the nonce is old.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Commit&lt;/code&gt; message is used to compute a cryptographic commitment to the current application state, to be placed into the next block header. This has some handy properties. Inconsistencies in updating that state will now appear as blockchain forks which catches a whole class of programming errors. This also simplifies the development of secure lightweight clients, as Merkle-hash proofs can be verified by checking against the block hash, and the block hash is signed by a quorum of validators.&lt;/p&gt;

&lt;p&gt;There can be multiple TMSP socket connections to an application.  Tendermint Core creates two TMSP connections to the application; one for the validation of transactions when broadcasting in the mempool, and another for the consensus engine to run block proposals.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s probably evident that applications designers need to very carefully design their message handlers to create a blockchain that does anything useful but this architecture provides a place to start.&lt;/p&gt;

&lt;h2 id=&#34;a-note-on-determinism&#34;&gt;A Note on Determinism&lt;/h2&gt;

&lt;p&gt;The logic for blockchain transaction processing must be deterministic.  If the application logic weren&amp;rsquo;t deterministic, consensus would not be reached among the Tendermint Core replica nodes.&lt;/p&gt;

&lt;p&gt;Solidity on Ethereum is a great language of choice for blockchain applications because, among other reasons, it is a completely deterministic programming language.  However, it&amp;rsquo;s also possible to create deterministic applications using existing popular languages like Java, C++, Python, or Go.  Game programmers and blockchain developers are already familiar with creating deterministic programs by avoiding sources of non-determinism such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;random number generators (without deterministic seeding)&lt;/li&gt;
&lt;li&gt;race conditions on threads (or avoiding threads altogether)&lt;/li&gt;
&lt;li&gt;the system clock&lt;/li&gt;
&lt;li&gt;uninitialized memory (in unsafe programming languages like C or C++)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gafferongames.com/networking-for-game-programmers/floating-point-determinism/&#34;&gt;floating point arithmetic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;language features that are random (e.g. map iteration in Go)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While programmers can avoid non-determinism by being careful, it is also possible to create a special linter or static analyzer for each language to check for determinism.  In the future we may work with partners to create such tools.&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;See the &lt;a href=&#34;getting-started&#34;&gt;getting started guide&lt;/a&gt; for more!&lt;/p&gt;

&lt;h2 id=&#34;contributions&#34;&gt;Contributions&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Many thanks to Zaki Manian for providing the &amp;ldquo;Intro to TMSP&amp;rdquo; section&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>